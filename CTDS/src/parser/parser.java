
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun Sep 27 14:03:18 ART 2015
//----------------------------------------------------

package parser;

import java_cup.runtime.*;
import ir.ast.*;
import java.util.LinkedList;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun Sep 27 14:03:18 ART 2015
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\124\000\002\002\004\000\002\007\003\000\002\014" +
    "\010\000\002\014\007\000\002\014\002\000\002\010\003" +
    "\000\002\010\003\000\002\010\004\000\002\011\005\000" +
    "\002\011\006\000\002\013\003\000\002\013\005\000\002" +
    "\024\003\000\002\024\006\000\002\012\003\000\002\012" +
    "\004\000\002\025\007\000\002\025\007\000\002\025\010" +
    "\000\002\025\010\000\002\017\004\000\002\017\006\000" +
    "\002\030\005\000\002\030\004\000\002\031\003\000\002" +
    "\031\003\000\002\031\004\000\002\031\002\000\002\021" +
    "\003\000\002\021\003\000\002\021\003\000\002\020\003" +
    "\000\002\020\004\000\002\027\006\000\002\027\004\000" +
    "\002\027\011\000\002\027\007\000\002\027\011\000\002" +
    "\027\005\000\002\027\005\000\002\027\004\000\002\027" +
    "\004\000\002\027\004\000\002\027\003\000\002\027\003" +
    "\000\002\002\003\000\002\002\003\000\002\002\003\000" +
    "\002\022\005\000\002\022\006\000\002\022\005\000\002" +
    "\023\003\000\002\023\005\000\002\023\006\000\002\016" +
    "\003\000\002\016\005\000\002\026\003\000\002\026\003" +
    "\000\002\026\003\000\002\026\005\000\002\026\004\000" +
    "\002\026\004\000\002\026\005\000\002\032\003\000\002" +
    "\032\003\000\002\032\003\000\002\032\003\000\002\032" +
    "\003\000\002\032\003\000\002\032\003\000\002\032\003" +
    "\000\002\032\003\000\002\032\003\000\002\032\003\000" +
    "\002\032\003\000\002\032\003\000\002\003\003\000\002" +
    "\003\003\000\002\003\003\000\002\015\003\000\002\004" +
    "\003\000\002\005\003\000\002\005\003\000\002\006\003" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\226\000\006\002\ufffd\043\006\001\002\000\004\002" +
    "\230\001\002\000\004\002\000\001\002\000\004\060\007" +
    "\001\002\000\102\006\uffb2\007\uffb2\010\uffb2\011\uffb2\012" +
    "\uffb2\013\uffb2\014\uffb2\016\uffb2\017\uffb2\020\uffb2\021\uffb2" +
    "\022\uffb2\023\uffb2\024\uffb2\025\uffb2\026\uffb2\030\uffb2\031" +
    "\uffb2\032\uffb2\033\uffb2\034\uffb2\036\uffb2\037\uffb2\040\uffb2" +
    "\042\uffb2\044\uffb2\046\uffb2\047\uffb2\050\uffb2\053\uffb2\054" +
    "\uffb2\060\uffb2\001\002\000\004\034\011\001\002\000\014" +
    "\035\012\041\022\051\015\052\014\055\016\001\002\000" +
    "\006\002\ufffd\043\006\001\002\000\014\035\ufff3\041\ufff3" +
    "\051\ufff3\052\ufff3\055\ufff3\001\002\000\004\060\uffe5\001" +
    "\002\000\004\060\uffe4\001\002\000\004\060\007\001\002" +
    "\000\004\060\007\001\002\000\004\035\216\001\002\000" +
    "\014\035\ufffb\041\022\051\015\052\014\055\016\001\002" +
    "\000\004\060\uffe3\001\002\000\014\035\ufffc\041\022\051" +
    "\015\052\014\055\016\001\002\000\014\035\ufffa\041\022" +
    "\051\015\052\014\055\016\001\002\000\004\060\007\001" +
    "\002\000\006\030\ufff7\031\ufff7\001\002\000\006\030\212" +
    "\031\171\001\002\000\012\030\ufff5\031\ufff5\032\031\036" +
    "\032\001\002\000\012\033\036\041\022\051\015\052\014" +
    "\001\002\000\004\004\033\001\002\000\066\006\uffb1\007" +
    "\uffb1\010\uffb1\011\uffb1\012\uffb1\013\uffb1\014\uffb1\017\uffb1" +
    "\020\uffb1\021\uffb1\022\uffb1\023\uffb1\024\uffb1\030\uffb1\031" +
    "\uffb1\033\uffb1\034\uffb1\037\uffb1\042\uffb1\044\uffb1\046\uffb1" +
    "\047\uffb1\050\uffb1\053\uffb1\054\uffb1\060\uffb1\001\002\000" +
    "\004\037\035\001\002\000\006\030\ufff4\031\ufff4\001\002" +
    "\000\006\034\044\054\045\001\002\000\004\060\007\001" +
    "\002\000\006\031\041\033\042\001\002\000\010\041\022" +
    "\051\015\052\014\001\002\000\006\034\044\054\045\001" +
    "\002\000\014\035\uffee\041\uffee\051\uffee\052\uffee\055\uffee" +
    "\001\002\000\036\030\055\034\044\035\uffe6\041\022\042" +
    "\064\044\051\046\060\047\066\050\056\051\015\052\014" +
    "\053\057\054\045\060\007\001\002\000\004\030\046\001" +
    "\002\000\042\030\uffea\034\uffea\035\uffea\041\uffea\042\uffea" +
    "\044\uffea\045\uffea\046\uffea\047\uffea\050\uffea\051\uffea\052" +
    "\uffea\053\uffea\054\uffea\055\uffea\060\uffea\001\002\000\004" +
    "\030\205\001\002\000\010\016\177\025\200\026\201\001" +
    "\002\000\004\030\176\001\002\000\030\030\uffe2\034\uffe2" +
    "\035\uffe2\042\uffe2\044\uffe2\046\uffe2\047\uffe2\050\uffe2\053" +
    "\uffe2\054\uffe2\060\uffe2\001\002\000\036\030\055\034\044" +
    "\035\uffe8\041\022\042\064\044\051\046\060\047\066\050" +
    "\056\051\015\052\014\053\057\054\045\060\007\001\002" +
    "\000\004\060\007\001\002\000\032\030\uffd6\034\uffd6\035" +
    "\uffd6\042\uffd6\044\uffd6\045\uffd6\046\uffd6\047\uffd6\050\uffd6" +
    "\053\uffd6\054\uffd6\060\uffd6\001\002\000\022\004\033\005" +
    "\077\007\071\015\102\032\105\056\073\057\076\060\007" +
    "\001\002\000\024\004\033\005\077\007\071\015\102\030" +
    "\162\032\105\056\073\057\076\060\007\001\002\000\004" +
    "\032\154\001\002\000\004\035\153\001\002\000\032\030" +
    "\uffd5\034\uffd5\035\uffd5\042\uffd5\044\uffd5\045\uffd5\046\uffd5" +
    "\047\uffd5\050\uffd5\053\uffd5\054\uffd5\060\uffd5\001\002\000" +
    "\102\006\uffce\007\uffce\010\uffce\011\uffce\012\uffce\013\uffce" +
    "\014\uffce\016\uffce\017\uffce\020\uffce\021\uffce\022\uffce\023" +
    "\uffce\024\uffce\025\uffce\026\uffce\030\uffce\031\uffce\032\136" +
    "\033\uffce\034\uffce\036\137\037\uffce\040\140\042\uffce\044" +
    "\uffce\046\uffce\047\uffce\050\uffce\053\uffce\054\uffce\060\uffce" +
    "\001\002\000\004\030\135\001\002\000\030\030\055\034" +
    "\044\035\uffe9\042\064\044\051\046\060\047\066\050\056" +
    "\053\057\054\045\060\007\001\002\000\004\060\007\001" +
    "\002\000\004\016\070\001\002\000\022\004\033\005\077" +
    "\007\071\015\102\032\105\056\073\057\076\060\007\001" +
    "\002\000\022\004\033\005\077\007\071\015\102\032\105" +
    "\056\073\057\076\060\007\001\002\000\066\006\uffc8\007" +
    "\uffc8\010\uffc8\011\uffc8\012\uffc8\013\uffc8\014\uffc8\017\uffc8" +
    "\020\uffc8\021\uffc8\022\uffc8\023\uffc8\024\uffc8\030\uffc8\031" +
    "\uffc8\033\uffc8\034\uffc8\037\uffc8\042\uffc8\044\uffc8\046\uffc8" +
    "\047\uffc8\050\uffc8\053\uffc8\054\uffc8\060\uffc8\001\002\000" +
    "\066\006\uffb0\007\uffb0\010\uffb0\011\uffb0\012\uffb0\013\uffb0" +
    "\014\uffb0\017\uffb0\020\uffb0\021\uffb0\022\uffb0\023\uffb0\024" +
    "\uffb0\030\uffb0\031\uffb0\033\uffb0\034\uffb0\037\uffb0\042\uffb0" +
    "\044\uffb0\046\uffb0\047\uffb0\050\uffb0\053\uffb0\054\uffb0\060" +
    "\uffb0\001\002\000\066\006\uffb4\007\uffb4\010\uffb4\011\uffb4" +
    "\012\uffb4\013\uffb4\014\uffb4\017\uffb4\020\uffb4\021\uffb4\022" +
    "\uffb4\023\uffb4\024\uffb4\030\uffb4\031\uffb4\033\uffb4\034\uffb4" +
    "\037\uffb4\042\uffb4\044\uffb4\046\uffb4\047\uffb4\050\uffb4\053" +
    "\uffb4\054\uffb4\060\uffb4\001\002\000\066\006\uffb5\007\uffb5" +
    "\010\uffb5\011\uffb5\012\uffb5\013\uffb5\014\uffb5\017\uffb5\020" +
    "\uffb5\021\uffb5\022\uffb5\023\uffb5\024\uffb5\030\uffb5\031\uffb5" +
    "\033\uffb5\034\uffb5\037\uffb5\042\uffb5\044\uffb5\046\uffb5\047" +
    "\uffb5\050\uffb5\053\uffb5\054\uffb5\060\uffb5\001\002\000\066" +
    "\006\uffaf\007\uffaf\010\uffaf\011\uffaf\012\uffaf\013\uffaf\014" +
    "\uffaf\017\uffaf\020\uffaf\021\uffaf\022\uffaf\023\uffaf\024\uffaf" +
    "\030\uffaf\031\uffaf\033\uffaf\034\uffaf\037\uffaf\042\uffaf\044" +
    "\uffaf\046\uffaf\047\uffaf\050\uffaf\053\uffaf\054\uffaf\060\uffaf" +
    "\001\002\000\066\006\uffae\007\uffae\010\uffae\011\uffae\012" +
    "\uffae\013\uffae\014\uffae\017\uffae\020\uffae\021\uffae\022\uffae" +
    "\023\uffae\024\uffae\030\uffae\031\uffae\033\uffae\034\uffae\037" +
    "\uffae\042\uffae\044\uffae\046\uffae\047\uffae\050\uffae\053\uffae" +
    "\054\uffae\060\uffae\001\002\000\066\006\uffb3\007\uffb3\010" +
    "\uffb3\011\uffb3\012\uffb3\013\uffb3\014\uffb3\017\uffb3\020\uffb3" +
    "\021\uffb3\022\uffb3\023\uffb3\024\uffb3\030\uffb3\031\uffb3\033" +
    "\uffb3\034\uffb3\037\uffb3\042\uffb3\044\uffb3\046\uffb3\047\uffb3" +
    "\050\uffb3\053\uffb3\054\uffb3\060\uffb3\001\002\000\036\006" +
    "\117\007\107\010\122\011\113\012\115\013\125\014\110" +
    "\017\116\020\112\021\124\022\120\023\123\024\114\031" +
    "\130\001\002\000\022\004\033\005\077\007\071\015\102" +
    "\032\105\056\073\057\076\060\007\001\002\000\066\006" +
    "\uffc9\007\uffc9\010\uffc9\011\uffc9\012\uffc9\013\uffc9\014\uffc9" +
    "\017\uffc9\020\uffc9\021\uffc9\022\uffc9\023\uffc9\024\uffc9\030" +
    "\uffc9\031\uffc9\033\uffc9\034\uffc9\037\uffc9\042\uffc9\044\uffc9" +
    "\046\uffc9\047\uffc9\050\uffc9\053\uffc9\054\uffc9\060\uffc9\001" +
    "\002\000\066\006\uffc7\007\uffc7\010\uffc7\011\uffc7\012\uffc7" +
    "\013\uffc7\014\uffc7\017\uffc7\020\uffc7\021\uffc7\022\uffc7\023" +
    "\uffc7\024\uffc7\030\uffc7\031\uffc7\033\uffc7\034\uffc7\037\uffc7" +
    "\042\uffc7\044\uffc7\046\uffc7\047\uffc7\050\uffc7\053\uffc7\054" +
    "\uffc7\060\uffc7\001\002\000\022\004\033\005\077\007\071" +
    "\015\102\032\105\056\073\057\076\060\007\001\002\000" +
    "\036\006\117\007\107\010\122\011\113\012\115\013\125" +
    "\014\110\017\116\020\112\021\124\022\120\023\123\024" +
    "\114\033\121\001\002\000\022\004\uffc1\005\uffc1\007\uffc1" +
    "\015\uffc1\032\uffc1\056\uffc1\057\uffc1\060\uffc1\001\002\000" +
    "\022\004\uffb7\005\uffb7\007\uffb7\015\uffb7\032\uffb7\056\uffb7" +
    "\057\uffb7\060\uffb7\001\002\000\022\004\033\005\077\007" +
    "\071\015\102\032\105\056\073\057\076\060\007\001\002" +
    "\000\022\004\uffb9\005\uffb9\007\uffb9\015\uffb9\032\uffb9\056" +
    "\uffb9\057\uffb9\060\uffb9\001\002\000\022\004\uffbe\005\uffbe" +
    "\007\uffbe\015\uffbe\032\uffbe\056\uffbe\057\uffbe\060\uffbe\001" +
    "\002\000\022\004\uffba\005\uffba\007\uffba\015\uffba\032\uffba" +
    "\056\uffba\057\uffba\060\uffba\001\002\000\022\004\uffbf\005" +
    "\uffbf\007\uffbf\015\uffbf\032\uffbf\056\uffbf\057\uffbf\060\uffbf" +
    "\001\002\000\022\004\uffb8\005\uffb8\007\uffb8\015\uffb8\032" +
    "\uffb8\056\uffb8\057\uffb8\060\uffb8\001\002\000\022\004\uffc2" +
    "\005\uffc2\007\uffc2\015\uffc2\032\uffc2\056\uffc2\057\uffc2\060" +
    "\uffc2\001\002\000\022\004\uffbc\005\uffbc\007\uffbc\015\uffbc" +
    "\032\uffbc\056\uffbc\057\uffbc\060\uffbc\001\002\000\066\006" +
    "\uffc3\007\uffc3\010\uffc3\011\uffc3\012\uffc3\013\uffc3\014\uffc3" +
    "\017\uffc3\020\uffc3\021\uffc3\022\uffc3\023\uffc3\024\uffc3\030" +
    "\uffc3\031\uffc3\033\uffc3\034\uffc3\037\uffc3\042\uffc3\044\uffc3" +
    "\046\uffc3\047\uffc3\050\uffc3\053\uffc3\054\uffc3\060\uffc3\001" +
    "\002\000\022\004\uffc0\005\uffc0\007\uffc0\015\uffc0\032\uffc0" +
    "\056\uffc0\057\uffc0\060\uffc0\001\002\000\022\004\uffbb\005" +
    "\uffbb\007\uffbb\015\uffbb\032\uffbb\056\uffbb\057\uffbb\060\uffbb" +
    "\001\002\000\022\004\uffbd\005\uffbd\007\uffbd\015\uffbd\032" +
    "\uffbd\056\uffbd\057\uffbd\060\uffbd\001\002\000\022\004\uffb6" +
    "\005\uffb6\007\uffb6\015\uffb6\032\uffb6\056\uffb6\057\uffb6\060" +
    "\uffb6\001\002\000\066\006\117\007\107\010\122\011\113" +
    "\012\115\013\125\014\110\017\116\020\112\021\124\022" +
    "\120\023\123\024\114\030\uffc6\031\uffc6\033\uffc6\034\uffc6" +
    "\037\uffc6\042\uffc6\044\uffc6\046\uffc6\047\uffc6\050\uffc6\053" +
    "\uffc6\054\uffc6\060\uffc6\001\002\000\066\006\uffc4\007\uffc4" +
    "\010\uffc4\011\uffc4\012\uffc4\013\uffc4\014\uffc4\017\uffc4\020" +
    "\uffc4\021\uffc4\022\uffc4\023\uffc4\024\uffc4\030\uffc4\031\uffc4" +
    "\033\uffc4\034\uffc4\037\uffc4\042\uffc4\044\uffc4\046\uffc4\047" +
    "\uffc4\050\uffc4\053\uffc4\054\uffc4\060\uffc4\001\002\000\022" +
    "\004\033\005\077\007\071\015\102\032\105\056\073\057" +
    "\076\060\007\001\002\000\060\006\117\007\107\010\122" +
    "\011\113\012\115\013\125\014\110\017\116\020\112\021" +
    "\124\022\120\023\123\024\114\030\055\034\044\042\064" +
    "\044\051\046\060\047\066\050\056\053\057\054\045\060" +
    "\007\001\002\000\032\030\uffdc\034\uffdc\035\uffdc\042\uffdc" +
    "\044\uffdc\045\uffdc\046\uffdc\047\uffdc\050\uffdc\053\uffdc\054" +
    "\uffdc\060\uffdc\001\002\000\066\006\uffc5\007\uffc5\010\uffc5" +
    "\011\uffc5\012\uffc5\013\uffc5\014\uffc5\017\uffc5\020\uffc5\021" +
    "\uffc5\022\uffc5\023\uffc5\024\uffc5\030\uffc5\031\uffc5\033\uffc5" +
    "\034\uffc5\037\uffc5\042\uffc5\044\uffc5\046\uffc5\047\uffc5\050" +
    "\uffc5\053\uffc5\054\uffc5\060\uffc5\001\002\000\030\030\uffe1" +
    "\034\uffe1\035\uffe1\042\uffe1\044\uffe1\046\uffe1\047\uffe1\050" +
    "\uffe1\053\uffe1\054\uffe1\060\uffe1\001\002\000\032\030\uffd8" +
    "\034\uffd8\035\uffd8\042\uffd8\044\uffd8\045\uffd8\046\uffd8\047" +
    "\uffd8\050\uffd8\053\uffd8\054\uffd8\060\uffd8\001\002\000\024" +
    "\004\033\005\077\007\071\015\102\032\105\033\146\056" +
    "\073\057\076\060\007\001\002\000\022\004\033\005\077" +
    "\007\071\015\102\032\105\056\073\057\076\060\007\001" +
    "\002\000\004\060\007\001\002\000\074\006\uffcd\007\uffcd" +
    "\010\uffcd\011\uffcd\012\uffcd\013\uffcd\014\uffcd\016\uffcd\017" +
    "\uffcd\020\uffcd\021\uffcd\022\uffcd\023\uffcd\024\uffcd\025\uffcd" +
    "\026\uffcd\030\uffcd\031\uffcd\033\uffcd\034\uffcd\037\uffcd\042" +
    "\uffcd\044\uffcd\046\uffcd\047\uffcd\050\uffcd\053\uffcd\054\uffcd" +
    "\060\uffcd\001\002\000\066\006\uffcf\007\uffcf\010\uffcf\011" +
    "\uffcf\012\uffcf\013\uffcf\014\uffcf\017\uffcf\020\uffcf\021\uffcf" +
    "\022\uffcf\023\uffcf\024\uffcf\030\uffcf\031\uffcf\033\uffcf\034" +
    "\uffcf\037\uffcf\042\uffcf\044\uffcf\046\uffcf\047\uffcf\050\uffcf" +
    "\053\uffcf\054\uffcf\060\uffcf\001\002\000\036\006\117\007" +
    "\107\010\122\011\113\012\115\013\125\014\110\017\116" +
    "\020\112\021\124\022\120\023\123\024\114\037\144\001" +
    "\002\000\074\006\uffcc\007\uffcc\010\uffcc\011\uffcc\012\uffcc" +
    "\013\uffcc\014\uffcc\016\uffcc\017\uffcc\020\uffcc\021\uffcc\022" +
    "\uffcc\023\uffcc\024\uffcc\025\uffcc\026\uffcc\030\uffcc\031\uffcc" +
    "\033\uffcc\034\uffcc\037\uffcc\042\uffcc\044\uffcc\046\uffcc\047" +
    "\uffcc\050\uffcc\053\uffcc\054\uffcc\060\uffcc\001\002\000\040" +
    "\006\117\007\107\010\122\011\113\012\115\013\125\014" +
    "\110\017\116\020\112\021\124\022\120\023\123\024\114" +
    "\031\uffcb\033\uffcb\001\002\000\066\006\uffd1\007\uffd1\010" +
    "\uffd1\011\uffd1\012\uffd1\013\uffd1\014\uffd1\017\uffd1\020\uffd1" +
    "\021\uffd1\022\uffd1\023\uffd1\024\uffd1\030\uffd1\031\uffd1\033" +
    "\uffd1\034\uffd1\037\uffd1\042\uffd1\044\uffd1\046\uffd1\047\uffd1" +
    "\050\uffd1\053\uffd1\054\uffd1\060\uffd1\001\002\000\006\031" +
    "\150\033\151\001\002\000\022\004\033\005\077\007\071" +
    "\015\102\032\105\056\073\057\076\060\007\001\002\000" +
    "\066\006\uffd0\007\uffd0\010\uffd0\011\uffd0\012\uffd0\013\uffd0" +
    "\014\uffd0\017\uffd0\020\uffd0\021\uffd0\022\uffd0\023\uffd0\024" +
    "\uffd0\030\uffd0\031\uffd0\033\uffd0\034\uffd0\037\uffd0\042\uffd0" +
    "\044\uffd0\046\uffd0\047\uffd0\050\uffd0\053\uffd0\054\uffd0\060" +
    "\uffd0\001\002\000\040\006\117\007\107\010\122\011\113" +
    "\012\115\013\125\014\110\017\116\020\112\021\124\022" +
    "\120\023\123\024\114\031\uffca\033\uffca\001\002\000\042" +
    "\030\uffeb\034\uffeb\035\uffeb\041\uffeb\042\uffeb\044\uffeb\045" +
    "\uffeb\046\uffeb\047\uffeb\050\uffeb\051\uffeb\052\uffeb\053\uffeb" +
    "\054\uffeb\055\uffeb\060\uffeb\001\002\000\022\004\033\005" +
    "\077\007\071\015\102\032\105\056\073\057\076\060\007" +
    "\001\002\000\036\006\117\007\107\010\122\011\113\012" +
    "\115\013\125\014\110\017\116\020\112\021\124\022\120" +
    "\023\123\024\114\033\156\001\002\000\026\030\055\034" +
    "\044\042\064\044\051\046\060\047\066\050\056\053\057" +
    "\054\045\060\007\001\002\000\032\030\uffdd\034\uffdd\035" +
    "\uffdd\042\uffdd\044\uffdd\045\160\046\uffdd\047\uffdd\050\uffdd" +
    "\053\uffdd\054\uffdd\060\uffdd\001\002\000\026\030\055\034" +
    "\044\042\064\044\051\046\060\047\066\050\056\053\057" +
    "\054\045\060\007\001\002\000\032\030\uffde\034\uffde\035" +
    "\uffde\042\uffde\044\uffde\045\uffde\046\uffde\047\uffde\050\uffde" +
    "\053\uffde\054\uffde\060\uffde\001\002\000\032\030\uffd9\034" +
    "\uffd9\035\uffd9\042\uffd9\044\uffd9\045\uffd9\046\uffd9\047\uffd9" +
    "\050\uffd9\053\uffd9\054\uffd9\060\uffd9\001\002\000\036\006" +
    "\117\007\107\010\122\011\113\012\115\013\125\014\110" +
    "\017\116\020\112\021\124\022\120\023\123\024\114\030" +
    "\164\001\002\000\032\030\uffda\034\uffda\035\uffda\042\uffda" +
    "\044\uffda\045\uffda\046\uffda\047\uffda\050\uffda\053\uffda\054" +
    "\uffda\060\uffda\001\002\000\060\006\117\007\107\010\122" +
    "\011\113\012\115\013\125\014\110\017\116\020\112\021" +
    "\124\022\120\023\123\024\114\030\055\034\044\042\064" +
    "\044\051\046\060\047\066\050\056\053\057\054\045\060" +
    "\007\001\002\000\032\030\uffdb\034\uffdb\035\uffdb\042\uffdb" +
    "\044\uffdb\045\uffdb\046\uffdb\047\uffdb\050\uffdb\053\uffdb\054" +
    "\uffdb\060\uffdb\001\002\000\006\030\172\031\171\001\002" +
    "\000\010\030\ufff5\031\ufff5\036\032\001\002\000\004\060" +
    "\007\001\002\000\040\030\ufff9\034\ufff9\035\ufff9\041\ufff9" +
    "\042\ufff9\044\ufff9\046\ufff9\047\ufff9\050\ufff9\051\ufff9\052" +
    "\ufff9\053\ufff9\054\ufff9\055\ufff9\060\ufff9\001\002\000\006" +
    "\030\ufff6\031\ufff6\001\002\000\004\060\007\001\002\000" +
    "\030\030\055\034\044\035\uffe7\042\064\044\051\046\060" +
    "\047\066\050\056\053\057\054\045\060\007\001\002\000" +
    "\032\030\uffd7\034\uffd7\035\uffd7\042\uffd7\044\uffd7\045\uffd7" +
    "\046\uffd7\047\uffd7\050\uffd7\053\uffd7\054\uffd7\060\uffd7\001" +
    "\002\000\022\004\uffd4\005\uffd4\007\uffd4\015\uffd4\032\uffd4" +
    "\056\uffd4\057\uffd4\060\uffd4\001\002\000\022\004\uffd3\005" +
    "\uffd3\007\uffd3\015\uffd3\032\uffd3\056\uffd3\057\uffd3\060\uffd3" +
    "\001\002\000\022\004\uffd2\005\uffd2\007\uffd2\015\uffd2\032" +
    "\uffd2\056\uffd2\057\uffd2\060\uffd2\001\002\000\022\004\033" +
    "\005\077\007\071\015\102\032\105\056\073\057\076\060" +
    "\007\001\002\000\036\006\117\007\107\010\122\011\113" +
    "\012\115\013\125\014\110\017\116\020\112\021\124\022" +
    "\120\023\123\024\114\030\204\001\002\000\032\030\uffe0" +
    "\034\uffe0\035\uffe0\042\uffe0\044\uffe0\045\uffe0\046\uffe0\047" +
    "\uffe0\050\uffe0\053\uffe0\054\uffe0\060\uffe0\001\002\000\032" +
    "\030\uffdf\034\uffdf\035\uffdf\042\uffdf\044\uffdf\045\uffdf\046" +
    "\uffdf\047\uffdf\050\uffdf\053\uffdf\054\uffdf\060\uffdf\001\002" +
    "\000\004\060\007\001\002\000\006\031\uffec\033\uffec\001" +
    "\002\000\006\031\uffed\033\uffed\001\002\000\014\035\ufff1" +
    "\041\ufff1\051\ufff1\052\ufff1\055\ufff1\001\002\000\040\030" +
    "\ufff8\034\ufff8\035\ufff8\041\ufff8\042\ufff8\044\ufff8\046\ufff8" +
    "\047\ufff8\050\ufff8\051\ufff8\052\ufff8\053\ufff8\054\ufff8\055" +
    "\ufff8\060\ufff8\001\002\000\004\060\007\001\002\000\014" +
    "\035\ufff2\041\ufff2\051\ufff2\052\ufff2\055\ufff2\001\002\000" +
    "\004\032\031\001\002\000\006\002\ufffd\043\006\001\002" +
    "\000\004\002\uffff\001\002\000\004\032\221\001\002\000" +
    "\012\033\222\041\022\051\015\052\014\001\002\000\006" +
    "\034\044\054\045\001\002\000\006\031\041\033\224\001" +
    "\002\000\006\034\044\054\045\001\002\000\014\035\uffef" +
    "\041\uffef\051\uffef\052\uffef\055\uffef\001\002\000\014\035" +
    "\ufff0\041\ufff0\051\ufff0\052\ufff0\055\ufff0\001\002\000\004" +
    "\002\ufffe\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\226\000\006\007\003\014\004\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\015\007\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\010\017\011\022\012" +
    "\020\021\016\025\012\001\001\000\004\014\226\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\015\217\001\001\000\010\013\166\015\027\024\025" +
    "\001\001\000\002\001\001\000\006\021\212\025\213\001" +
    "\001\000\002\001\001\000\010\012\023\021\024\025\012" +
    "\001\001\000\006\021\212\025\213\001\001\000\010\013" +
    "\026\015\027\024\025\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\017\037\021\036\001" +
    "\001\000\004\004\033\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\030\210\001\001\000" +
    "\004\015\207\001\001\000\002\001\001\000\004\021\205" +
    "\001\001\000\004\030\042\001\001\000\002\001\001\000" +
    "\024\011\052\015\062\020\064\021\053\022\046\023\047" +
    "\027\051\030\061\031\060\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\002\201\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\015\062\020" +
    "\174\021\173\022\046\023\047\027\051\030\061\001\001" +
    "\000\010\013\166\015\167\024\025\001\001\000\002\001" +
    "\001\000\022\003\103\004\074\005\077\006\073\015\062" +
    "\022\071\023\102\026\164\001\001\000\022\003\103\004" +
    "\074\005\077\006\073\015\062\022\071\023\102\026\162" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\015\062" +
    "\022\046\023\047\027\133\030\061\001\001\000\004\015" +
    "\066\001\001\000\002\001\001\000\022\003\103\004\074" +
    "\005\077\006\073\015\062\022\071\023\102\026\100\001" +
    "\001\000\022\003\103\004\074\005\077\006\073\015\062" +
    "\022\071\023\102\026\132\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\032" +
    "\110\001\001\000\022\003\103\004\074\005\077\006\073" +
    "\015\062\022\071\023\102\026\126\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\003\103\004\074\005\077" +
    "\006\073\015\062\022\071\023\102\026\105\001\001\000" +
    "\004\032\110\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\003\103\004\074\005\077\006\073\015\062\022" +
    "\071\023\102\026\125\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\032\110\001\001\000\004\032\110" +
    "\001\001\000\022\003\103\004\074\005\077\006\073\015" +
    "\062\022\071\023\102\026\130\001\001\000\016\015\062" +
    "\022\046\023\047\027\131\030\061\032\110\001\001\000" +
    "\002\001\001\000\004\032\110\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\003\103\004\074\005\077\006" +
    "\073\015\062\016\146\022\071\023\102\026\144\001\001" +
    "\000\022\003\103\004\074\005\077\006\073\015\062\022" +
    "\071\023\102\026\142\001\001\000\010\015\062\022\141" +
    "\023\140\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\032\110\001\001\000\002\001\001\000\004\032\110" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\003" +
    "\103\004\074\005\077\006\073\015\062\022\071\023\102" +
    "\026\151\001\001\000\002\001\001\000\004\032\110\001" +
    "\001\000\002\001\001\000\022\003\103\004\074\005\077" +
    "\006\073\015\062\022\071\023\102\026\154\001\001\000" +
    "\004\032\110\001\001\000\014\015\062\022\046\023\047" +
    "\027\156\030\061\001\001\000\002\001\001\000\014\015" +
    "\062\022\046\023\047\027\160\030\061\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\032\110\001\001\000" +
    "\002\001\001\000\016\015\062\022\046\023\047\027\165" +
    "\030\061\032\110\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\015\167\024\172\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\013\026\015" +
    "\167\024\025\001\001\000\014\015\062\022\046\023\047" +
    "\027\133\030\061\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\003\103" +
    "\004\074\005\077\006\073\015\062\022\071\023\102\026" +
    "\202\001\001\000\004\032\110\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\015\206\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\015\214\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\014\216\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\017\222\021\036\001\001\000\004\030" +
    "\225\001\001\000\002\001\001\000\004\030\224\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



     public void syntax_error(Symbol s){
        System.out.println("Sintax error in line: " + s.left +" column: "+ s.right +" symbol:"+s.value);
     }

     public void unrecovered_syntax_error(Symbol s){
        System.out.println("Unrecovered sintax error in line: " + s.left +" column: "+ s.right +" symbol:"+s.value);
     }



}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // float_literal ::= FLOAT_LITERAL 
            {
              FloatLiteral RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Float f = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new FloatLiteral(f);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("float_literal",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // bool_literal ::= FALSE 
            {
              BoolLiteral RESULT =null;
		 RESULT = new BoolLiteral(false) ;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_literal",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // bool_literal ::= TRUE 
            {
              BoolLiteral RESULT =null;
		 RESULT = new BoolLiteral(true) ;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_literal",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // int_literal ::= INT_LITERAL 
            {
              IntLiteral RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IntLiteral(n) ;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("int_literal",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // id ::= IDENTIFIER 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = i ;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("id",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // literal ::= bool_literal 
            {
              Literal RESULT =null;
		int blleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int blright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		BoolLiteral bl = (BoolLiteral)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = bl ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // literal ::= float_literal 
            {
              Literal RESULT =null;
		int flleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int flright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		FloatLiteral fl = (FloatLiteral)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = fl ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // literal ::= int_literal 
            {
              Literal RESULT =null;
		int illeft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ilright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		IntLiteral il = (IntLiteral)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = il ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // operations ::= OR 
            {
              BinOpType RESULT =null;
		 RESULT = BinOpType.OR; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operations",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // operations ::= AND 
            {
              BinOpType RESULT =null;
		 RESULT = BinOpType.AND; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operations",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // operations ::= NOTEQ 
            {
              BinOpType RESULT =null;
		 RESULT = BinOpType.NOTEQ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operations",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // operations ::= EQEQ 
            {
              BinOpType RESULT =null;
		 RESULT = BinOpType.EQEQ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operations",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // operations ::= GTEQ 
            {
              BinOpType RESULT =null;
		 RESULT = BinOpType.GTEQ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operations",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // operations ::= LTEQ 
            {
              BinOpType RESULT =null;
		 RESULT = BinOpType.LTEQ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operations",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // operations ::= GT 
            {
              BinOpType RESULT =null;
		 RESULT = BinOpType.GT; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operations",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // operations ::= LT 
            {
              BinOpType RESULT =null;
		 RESULT = BinOpType.LT; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operations",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // operations ::= DIVIDE 
            {
              BinOpType RESULT =null;
		 RESULT = BinOpType.DIVIDE; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operations",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // operations ::= MOD 
            {
              BinOpType RESULT =null;
		 RESULT = BinOpType.MOD; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operations",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // operations ::= TIMES 
            {
              BinOpType RESULT =null;
		 RESULT = BinOpType.TIMES; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operations",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // operations ::= MINUS 
            {
              BinOpType RESULT =null;
		 RESULT = BinOpType.MINUS; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operations",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // operations ::= PLUS 
            {
              BinOpType RESULT =null;
		 RESULT = BinOpType.PLUS; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operations",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // expr ::= LPAREN expr RPAREN 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // expr ::= NOT expr 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new UnaryOpExpr(UnaryOpType.NOT,e) ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // expr ::= MINUS expr 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new UnaryOpExpr(UnaryOpType.MINUS,e) ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // expr ::= expr operations expr 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		BinOpType op = (BinOpType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinOpExpr(e,op,e2) ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // expr ::= literal 
            {
              Expression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Literal l = (Literal)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT =l ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // expr ::= method_call 
            {
              Expression RESULT =null;
		int mcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mcright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		MethodCall mc = (MethodCall)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = mc ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // expr ::= location 
            {
              Expression RESULT =null;
		int locleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int locright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VarLocation loc = (VarLocation)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT =loc ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // expr_sequence ::= expr_sequence COMMA expr 
            {
              LinkedList<Expression> RESULT =null;
		int expsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Expression> exps = (LinkedList<Expression>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression exp = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 exps.add(exp); 
                                                RESULT = exps;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_sequence",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // expr_sequence ::= expr 
            {
              LinkedList<Expression> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 LinkedList<Expression> l = new LinkedList<Expression>() ;
			l.add(e);
			RESULT = l; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_sequence",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // location ::= id LBRACKET expr RBRACKET 
            {
              VarLocation RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression exp = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new VarLocation(i,exp);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("location",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // location ::= id DOT location 
            {
              VarLocation RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VarLocation l = (VarLocation)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new VarLocation(i,l);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("location",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // location ::= id 
            {
              VarLocation RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new VarLocation(i);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("location",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // method_call ::= id DOT method_call 
            {
              MethodCall RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int mcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mcright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		MethodCall mc = (MethodCall)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new MethodCall(i,mc);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("method_call",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // method_call ::= id LPAREN expr_sequence RPAREN 
            {
              MethodCall RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Expression> exp = (LinkedList<Expression>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new MethodCall(i,exp);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("method_call",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // method_call ::= id LPAREN RPAREN 
            {
              MethodCall RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		RESULT = new MethodCall(i);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("method_call",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // assign_op ::= MINUSEQ 
            {
              AssignOpType RESULT =null;
		 RESULT = AssignOpType.DECREMENT;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assign_op",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // assign_op ::= PLUSEQ 
            {
              AssignOpType RESULT =null;
		 RESULT = AssignOpType.INCREMENT;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assign_op",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // assign_op ::= EQ 
            {
              AssignOpType RESULT =null;
		 RESULT = AssignOpType.ASSIGN;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assign_op",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // statement ::= body 
            {
              Statement RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Body b = (Body)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = b;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // statement ::= SEMI 
            {
              Statement RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // statement ::= CONTINUE SEMI 
            {
              Statement RESULT =null;
		RESULT= new ContinueStmt();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // statement ::= BREAK SEMI 
            {
              Statement RESULT =null;
		RESULT= new BreakStmt();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // statement ::= RETURN SEMI 
            {
              Statement RESULT =null;
		RESULT= new ReturnStmt();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // statement ::= RETURN expr SEMI 
            {
              Statement RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression exp = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT= new ReturnStmt(exp);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // statement ::= WHILE expr statement 
            {
              Statement RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression exp = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int stmtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stmtright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statement stmt = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new WhileStmt(stmt,exp);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // statement ::= FOR id EQ expr COMMA expr statement 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new ForStmt(i,e,e2,s);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // statement ::= IF LPAREN expr RPAREN statement 
            {
              Statement RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression cond = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ifBlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ifBlright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statement ifBl = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new IfStmt(cond,ifBl);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // statement ::= IF LPAREN expr RPAREN statement ELSE statement 
            {
              Statement RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expression cond = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int ifBlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ifBlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Statement ifBl = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int elseBlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int elseBlright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statement elseBl = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new IfStmt(cond,ifBl,elseBl);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // statement ::= method_call SEMI 
            {
              Statement RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		MethodCall m = (MethodCall)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new MethodCallStmt(m);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // statement ::= location assign_op expr SEMI 
            {
              Statement RESULT =null;
		int locleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int locright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		VarLocation loc = (VarLocation)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AssignOpType op = (AssignOpType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT =  new AssignStmt(loc,op,e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // statement_decl ::= statement_decl statement 
            {
              LinkedList<Statement> RESULT =null;
		int sdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sdright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Statement> sd = (LinkedList<Statement>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 sd.add(s);
						RESULT = sd ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement_decl",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // statement_decl ::= statement 
            {
              LinkedList<Statement> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 LinkedList<Statement> l = new LinkedList<Statement>() ;
                                l.add(s);
				RESULT = l; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement_decl",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // type ::= TYPE_BOOLEAN 
            {
              Type RESULT =null;
		RESULT = Type.BOOL ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // type ::= TYPE_FLOAT 
            {
              Type RESULT =null;
		RESULT = Type.FLOAT ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // type ::= TYPE_INT 
            {
              Type RESULT =null;
		RESULT = Type.INT ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // block ::= 
            {
              Block RESULT =null;
		 RESULT = new Block(null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("block",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // block ::= field_decl statement_decl 
            {
              Block RESULT =null;
		int sdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Statement> sd = (LinkedList<Statement>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Block(sd);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("block",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // block ::= field_decl 
            {
              Block RESULT =null;
		 RESULT = new Block(null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("block",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // block ::= statement_decl 
            {
              Block RESULT =null;
		int sdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Statement> sd = (LinkedList<Statement>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Block(sd);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("block",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // body ::= EXTERN SEMI 
            {
              Body RESULT =null;
		RESULT= new ExternStmt();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("body",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // body ::= LKEY block RKEY 
            {
              Body RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Block b = (Block)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT= new Body(b);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("body",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // parameters ::= parameters COMMA type id 
            {
              LinkedList<Parameter> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		LinkedList<Parameter> l = (LinkedList<Parameter>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  l.add(new Parameter(t,i)); RESULT= l;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameters",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // parameters ::= type id 
            {
              LinkedList<Parameter> RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 LinkedList<Parameter> l = new LinkedList<Parameter>() ; l.add(new Parameter(t,i)); RESULT= l;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameters",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // method ::= type id LPAREN parameters RPAREN body 
            {
              Method RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Parameter> p = (LinkedList<Parameter>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Body b = (Body)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Method(t,i,p,b);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("method",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // method ::= VOID id LPAREN parameters RPAREN body 
            {
              Method RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Parameter> p = (LinkedList<Parameter>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Body b = (Body)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Method(Type.VOID,i,p,b);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("method",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // method ::= VOID id LPAREN RPAREN body 
            {
              Method RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Body b = (Body)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Method(Type.VOID,i,b);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("method",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // method ::= type id LPAREN RPAREN body 
            {
              Method RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Body b = (Body)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Method(t,i,b);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("method",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // method_decl ::= method_decl method 
            {
              LinkedList<Method> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Method> l = (LinkedList<Method>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Method m = (Method)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 l.add(m);
						RESULT = l ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("method_decl",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // method_decl ::= method 
            {
              LinkedList<Method> RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Method m = (Method)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 LinkedList<Method> l = new LinkedList<Method>() ;
                                l.add(m);
				RESULT = l; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("method_decl",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // location_decl ::= id LBRACKET int_literal RBRACKET 
            {
              LocationDeclaration RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int illeft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ilright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		IntLiteral il = (IntLiteral)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new LocationDeclaration(i,il); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("location_decl",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // location_decl ::= id 
            {
              LocationDeclaration RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new LocationDeclaration(i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("location_decl",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // id_def ::= id_def COMMA location_decl 
            {
              LinkedList<LocationDeclaration> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<LocationDeclaration> l = (LinkedList<LocationDeclaration>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ldleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ldright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LocationDeclaration ld = (LocationDeclaration)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 l.add(ld);
				RESULT = l; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("id_def",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // id_def ::= location_decl 
            {
              LinkedList<LocationDeclaration> RESULT =null;
		int ldleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ldright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LocationDeclaration ld = (LocationDeclaration)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 LinkedList<LocationDeclaration> l = new LinkedList<LocationDeclaration>() ;
                                l.add(ld);
				RESULT = l; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("id_def",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // field_decl ::= field_decl type id_def SEMI 
            {
              LinkedList<FieldDeclaration> RESULT =null;
		int fdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int fdright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		LinkedList<FieldDeclaration> fd = (LinkedList<FieldDeclaration>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<LocationDeclaration> id = (LinkedList<LocationDeclaration>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 fd.add(new FieldDeclaration(t,id) );
				RESULT = fd; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("field_decl",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // field_decl ::= type id_def SEMI 
            {
              LinkedList<FieldDeclaration> RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<LocationDeclaration> id = (LinkedList<LocationDeclaration>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 LinkedList<FieldDeclaration> l = new LinkedList<FieldDeclaration>() ;
                                l.add(new FieldDeclaration(t,id) );
				RESULT = l; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("field_decl",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // decl ::= field_decl method_decl 
            {
              Declaration RESULT =null;
		int fdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fdright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<FieldDeclaration> fd = (LinkedList<FieldDeclaration>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int mdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Method> md = (LinkedList<Method>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Declaration(fd,md);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decl",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // decl ::= method_decl 
            {
              Declaration RESULT =null;
		int mdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Method> md = (LinkedList<Method>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Declaration(null,md);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decl",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // decl ::= field_decl 
            {
              Declaration RESULT =null;
		int fdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<FieldDeclaration> fd = (LinkedList<FieldDeclaration>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Declaration(fd,null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decl",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // class_decl ::= 
            {
              LinkedList<ClassDeclaration> RESULT =null;
		 LinkedList<ClassDeclaration> l = new LinkedList<ClassDeclaration>() ;
            RESULT = l; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("class_decl",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // class_decl ::= CLASS id LKEY RKEY class_decl 
            {
              LinkedList<ClassDeclaration> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<ClassDeclaration> l = (LinkedList<ClassDeclaration>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 l.add(new ClassDeclaration(i)) ;
            RESULT = l; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("class_decl",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // class_decl ::= CLASS id LKEY decl RKEY class_decl 
            {
              LinkedList<ClassDeclaration> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Declaration d = (Declaration)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<ClassDeclaration> l = (LinkedList<ClassDeclaration>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 l.add(new ClassDeclaration(i,d)) ;
            RESULT = l; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("class_decl",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= class_decl 
            {
              Program RESULT =null;
		int cdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<ClassDeclaration> cd = (LinkedList<ClassDeclaration>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Program(cd); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Program start_val = (Program)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

